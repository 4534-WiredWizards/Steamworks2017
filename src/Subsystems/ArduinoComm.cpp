// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ArduinoComm.h"
#include "../RobotMap.h"
#include "SerialPort.h"
#include "SmartDashboard/SmartDashboard.h"
#define MAX_INPUT_CHAR 32


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ArduinoComm::ArduinoComm() : Subsystem("ArduinoComm") {
	arduinoPort = RobotMap::arduinoComm;
	inputBuffer = (char*)calloc(MAX_INPUT_CHAR, sizeof(char));
	rightDistance = -999;
	leftDistance = -999;
	angleVal = -999;
	arduinoPort->EnableTermination();

}

void ArduinoComm::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

//Starts the robot climbing
void ArduinoComm::WriteTest (std::string value) {
	arduinoPort->Write(value);
}
void ArduinoComm::SetTimeout(double timeout) {
	arduinoPort->SetTimeout(timeout);
}

double ArduinoComm::GetDistance(){
	if (angleVal != -999) {
		return (rightDistance + leftDistance) / 2;
	}
	return -999; // values were bad, returning -999.
}

double ArduinoComm::GetAngle(){
	return angleVal; // if angle value was bad, it will return -999.
}

void ArduinoComm::ReadData() {
	arduinoPort->Write("?");
	arduinoPort->Read(inputBuffer, MAX_INPUT_CHAR);
	sscanf(inputBuffer, "%lf %lf %lf", &rightDistance, &leftDistance, &angleVal);
	std::cout << inputBuffer << std::endl;
}

