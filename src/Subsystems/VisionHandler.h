// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef VISIONHANDLER_H
#define VISIONHANDLER_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class VisionHandler: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	static const int CACHE_MISSED_NUM = 3;
	//ITable table;
	std::shared_ptr<NetworkTable> visionTable;
	int missedCount;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	VisionHandler();
	void InitDefaultCommand();
	class VisionTuple {
		public:
			double getDistance() {
				return distance;
			}
			void setDistance(double distance) {
			this->distance = distance;
			}

			double getCenter() {
				return center;
			}

			void setCenter(double center) {
				this->center = center;
			}

			double getAngle() {
				return angle;
			}

			void setAngle(double angle) {
				this->angle = angle;
			}

			VisionTuple(double x, double theta, double center) {
				this->distance = x;
				this->angle = theta;
				this->center = center;
			}

			std::string toString() {
				return "(" + std::to_string(this->distance) + "," + std::to_string(this->angle) + "," + std::to_string(this->center) + ")";
			}

			bool isDefault() {
				return this->distance == -999 && this->angle == -999 && this->center == -999;
			}

			void update(double x, double theta, double center) {
				this->distance = x;
				this->angle = theta;
				this->center = center;
			}
		private:
			double distance;
			double angle;
			double center;

		};

	std::shared_ptr<VisionHandler::VisionTuple> visionTuple;
	std::shared_ptr<VisionHandler::VisionTuple> getCurrentTuple();

	void updateSubsystem();

/*
	void initTable(ITable subtable) {
		this->table = subtable;
		updateTable();
	}

	ITable getTable() {
		return table;
	}

	void updateTable() {
		if (table) {
			table.PutString("Current Tuple", this->visionTuple.toString());
		}
	}
*/
	void startLiveWindowMode() {
		// TODO Auto-generated method stub
	}
	void stopLiveWindowMode() {
		// TODO Auto-generated method stub
	}
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
