// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef VISIONHANDLER_H
#define VISIONHANDLER_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class VisionHandler: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	static const int CACHE_MISSED_NUM = 3;
	//ITable table;
	std::shared_ptr<NetworkTable> visionTable;
	int missedCount;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	VisionHandler();
	void InitDefaultCommand();
	class VisionTuple {
		public:

			double getGearDistance() {
				return gearDistance;
			}

			void setGearDistance(double gearDistance) {
			this->gearDistance = gearDistance;
			}

			double getGearCenter() {
				return gearCenter;
			}

			void setGearCenter(double gearCenter) {
				this->gearCenter = gearCenter;
			}

			double getGearAngle() {
				return gearAngle;
			}

			void setGearAngle(double gearAngle) {
				this->gearAngle = gearAngle;
			}

			double getBoilerDistance() {
			return boilerDistance;
			}
			void setBoilerDistance(double boilerDistance) {
			this->boilerDistance = boilerDistance;
			}

			double getBoilerCenter() {
				return boilerCenter;
			}

			void setBoilerCenter(double boilerCenter) {
				this->boilerCenter = boilerCenter;
			}

			double getBoilerAngle() {
				return boilerAngle;
			}

			void setBoilerAngle(double boilerAngle) {
				this->boilerAngle = boilerAngle;
			}

			VisionTuple(double gearDistance, double gearTheta, double gearCenter, double boilerDistance, double boilerTheta, double boilerCenter) {
				this->gearDistance = gearDistance;
				this->gearAngle = gearTheta;
				this->gearCenter = gearCenter;
				this->boilerDistance = boilerDistance;
				this->boilerAngle = boilerTheta;
				this->boilerCenter = boilerCenter;
			}

			std::string toString() {
				return "(" + std::to_string(this->gearDistance) + "," + std::to_string(this->gearAngle) + "," + std::to_string(this->gearCenter) + ")";
			}

			bool gearIsDefault() {
				return this->gearDistance == -999 && this->gearAngle == -999 && this->gearCenter == -999;
			}
			bool boilerIsDefault() {
				return this->boilerDistance == -999 && this->boilerAngle == -999 && this->boilerCenter == -999;
			}

			void update(double gearDistance, double gearTheta, double gearCenter, double boilerDistance, double boilerTheta, double boilerCenter) {
				this->gearDistance = gearDistance;
				this->gearAngle = gearTheta;
				this->gearCenter = gearCenter;
				this->boilerDistance = boilerDistance;
				this->boilerAngle = boilerTheta;
				this->boilerCenter = boilerCenter;
			}

		private:
			double gearDistance;
			double gearAngle;
			double gearCenter;
			double boilerDistance;
			double boilerAngle;
			double boilerCenter;

		};

	std::shared_ptr<VisionHandler::VisionTuple> visionTuple;
	std::shared_ptr<VisionHandler::VisionTuple> getCurrentTuple();

	enum Mode { kGear, kBoiler, kDefault };
	void setMode(Mode camera);
	void readGearValues();
	void readBoilerValues();

/*
	void initTable(ITable subtable) {
		this->table = subtable;
		updateTable();
	}

	ITable getTable() {
		return table;
	}

	void updateTable() {
		if (table) {
			table.PutString("Current Tuple", this->visionTuple.toString());
		}
	}
*/
	void startLiveWindowMode() {
		// TODO Auto-generated method stub
	}
	void stopLiveWindowMode() {
		// TODO Auto-generated method stub
	}
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
