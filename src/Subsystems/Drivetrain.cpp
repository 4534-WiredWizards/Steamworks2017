// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drivetrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/MecanumDrive.h"
#include "SmartDashboard/SmartDashboard.h"

#include <iostream>
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::drivetrainfrontLeft;
    frontRight = RobotMap::drivetrainfrontRight;
    rearLeft = RobotMap::drivetrainrearLeft;
    rearRight = RobotMap::drivetrainrearRight;
    robotDrive = RobotMap::drivetrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    gyro = RobotMap::drivetrainGyro;

}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new MecanumDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Drivetrain::DriveStraight() {
	robotDrive->MecanumDrive_Cartesian(0.0, 1.0, 0.0, gyro->GetAngle());
}

void Drivetrain::MechanumDrive(std::shared_ptr<Joystick> joystick) {
	SmartDashboard::PutNumber("Gyro Angle", gyro->GetAngle());
	axis0 = joystick->GetRawAxis(0);
	axis1 = joystick->GetRawAxis(1);
	axis4 = joystick->GetRawAxis(4);
	std::cout << "======" << std::endl;
	std::cout << axis0 << std::endl;
	std::cout << axis1 << std::endl;
	std::cout << axis4 << std::endl;
	if (fabs(axis0) < 0.2) {
		axis0 = 0.0;
	}
	if (fabs(axis1) < 0.2) {
		axis1 = 0.0;
	}
	if (fabs(axis4) < 0.2) {
		axis4 = 0.0;
	}
	robotDrive->MecanumDrive_Cartesian(axis0, axis1, axis4, gyro->GetAngle());
}

void Drivetrain::Stop() {
	robotDrive->StopMotor();
}

void Drivetrain::Turn(double x) {
	robotDrive->MecanumDrive_Cartesian(0.0, 0.0, x, gyro->GetAngle());
}
void Drivetrain::Strafe(double x) {
	robotDrive->MecanumDrive_Cartesian(x, 0.0, 0.0, 0);
}
void Drivetrain::Forward(double x) {
	robotDrive->MecanumDrive_Cartesian(0.0, x, 0.0, 0);
}

void Drivetrain::TurnGyro() {

}

double Drivetrain::GetGyroAngle() {
	return gyro->GetAngle();
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

