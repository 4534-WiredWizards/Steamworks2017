// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "VisionHandler.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

VisionHandler::VisionHandler() : Subsystem("VisionHandler") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	visionTable = NetworkTable::GetTable("vision");
	missedCount = 0;
	visionTuple = RobotMap::visionTuple;
}

void VisionHandler::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


std::shared_ptr<VisionHandler::VisionTuple> VisionHandler::getCurrentTuple() {
	return visionTuple;
}
void VisionHandler::setMode(VisionHandler::Mode camera) {
	if (camera == Mode::kGear) {
		visionTable->PutString("whichCamera", "gear");
	}
	if (camera == Mode::kBoiler) {
		visionTable->PutString("whichCamera", "boiler");
	}
	if (camera == Mode::kDefault) {
		visionTable->PutString("whichCamera", "gear");
	}
}

void VisionHandler::readGearValues() {
	static std::shared_ptr<VisionHandler::VisionTuple> newTuple;
	newTuple.reset(new VisionHandler::VisionTuple(-999, -999, -999, -777, -777, -777));
	newTuple->setGearAngle(visionTable->GetNumber("gearAngle", -999));
	newTuple->setGearDistance(visionTable->GetNumber("gearDistance", -999));
	newTuple->setGearCenter(visionTable->GetNumber("gearCV",-999));
	if(newTuple->gearIsDefault()) {
		missedCount++;
	} else {
		this->visionTuple = newTuple;
	}
	if(missedCount > CACHE_MISSED_NUM) {
		missedCount = 0;
		this->visionTuple = newTuple;
	}
}

void VisionHandler::readBoilerValues() {
	static std::shared_ptr<VisionHandler::VisionTuple> newTuple;
	newTuple.reset(new VisionHandler::VisionTuple(-777, -777, -777, -999, -999, -999));
	newTuple->setBoilerAngle(visionTable->GetNumber("boilerAngle", -999));
	newTuple->setBoilerDistance(visionTable->GetNumber("boilerDistance", -999));
	newTuple->setBoilerCenter(visionTable->GetNumber("boilerCV",-999));
	if(newTuple->boilerIsDefault()) {
		missedCount++;
	} else {
		this->visionTuple = newTuple;
	}
	if(missedCount > CACHE_MISSED_NUM) {
		missedCount = 0;
		this->visionTuple = newTuple;
	}
}
