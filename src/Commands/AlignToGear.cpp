// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AlignToGear.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AlignToGear::AlignToGear(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::visionHandler.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::arduinoComm.get());
	Requires(Robot::drivetrain.get());
	isFinished = false;
	//visionTable = NetworkTable::GetTable("vision");
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AlignToGear::Initialize() {
	Robot::arduinoComm->WriteTest("1");
}

// Called repeatedly when this Command is scheduled to run
void AlignToGear::Execute() {
	isFinished=false;
	Robot::arduinoComm->ReadData();
	//double CV = visionTable->GetNumber("gearCV",-999);
	std::cout << "angle: " << Robot::arduinoComm->GetAngle() << std::endl;
	if(Robot::arduinoComm->GetAngle() != -999) {
		if(Robot::arduinoComm->GetAngle() > 5){
			Robot::drivetrain->Turn(-0.4);
		} else if(Robot::arduinoComm->GetAngle() < -5){
			Robot::drivetrain->Turn(0.4);
		} else {
			Robot::visionHandler->updateSubsystem();
			VisionData = Robot::visionHandler->getCurrentTuple();
			std::cout << "lateral: " << VisionData->getCenter() << std::endl;
			if(VisionData->getCenter() != -999) {
				if(VisionData->getCenter() > 1.5){
					Robot::drivetrain->Strafe(0.5);
				} else if(VisionData->getCenter() < -1.5){
					Robot::drivetrain->Strafe(-0.5);
				} else {
					std::cout << "distance: " << Robot::arduinoComm->GetDistance() << std::endl;
					if(Robot::arduinoComm->GetDistance() > 9){
					Robot::drivetrain->Forward(0.6);
					} else {
					isFinished=true;
					}
				}
			}
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool AlignToGear::IsFinished() {
    return isFinished;
}

// Called once after isFinished returns true
void AlignToGear::End() {
	Robot::drivetrain->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AlignToGear::Interrupted() {
	AlignToGear::End();
}
